- name: Install torque packages
  apt: pkg={{ item }} state=present
  become: true
  become_user: "{{ root_user }}"
  with_items:
    - torque-scheduler 
    - torque-server 
    - torque-mom 
    - torque-client 

- name: "get the torque hostname"
  become: true
  become_user: "{{ root_user }}"
  shell: "cat /etc/torque/server_name"
  register: hostnamecontent_command
  changed_when: False

- name: "set the torque hostname (1)"
  become: true
  become_user: "{{ root_user }}"
  shell: "echo '{{ torque_hostname }}' > /etc/torque/server_name"
  when: hostnamecontent_command.stdout != torque_hostname

- name: "set the torque hostname (2)"
  become: true
  become_user: "{{ root_user }}"
  lineinfile: 
    path: "/var/spool/torque/mom_priv/config"
    line: "$pbsserver {{ torque_hostname }}"
    create: true
  register: torque_hostname_2

- name: "set the torque hostname (3)"
  become: true
  become_user: "{{ root_user }}"
  lineinfile: 
    path: "/var/spool/torque/server_priv/nodes"
    line: "{{ torque_hostname }} np={{ torque_cpus }}"
    create: true
  register: torque_hostname_3

# Note: we need to restart because the services are already started
# when installed, and we change the hostname only afterwards
## For some reason, using the ansible 'service' module
## sometime doesn't properly restart the server, and the following 
## task "checking..." then fails... I try to restart 'manually'
#- name: (Re)start the torque services
##  become: true
#   become_user: "{{ root_user }}"
#  service:
#    name: "{{ item }}"
#    state: restarted
#  with_items:
#    - torque-server
#    - torque-mom
#    - torque-scheduler
- name: Restart the torque server
  become_user: "{{ root_user }}"
  become: true
  shell: /etc/init.d/torque-server restart
  when: hostnamecontent_command.stdout != torque_hostname or torque_hostname_2.changed or torque_hostname_3.changed
  
- name: waiting 5 seconds for torque to start...
  shell: sleep 5
  when: hostnamecontent_command.stdout != torque_hostname or torque_hostname_2.changed or torque_hostname_3.changed
  changed_when: False

- name: "Checking if torque is already configured"
  become: true
  become_user: "{{ root_user }}"
  shell: qmgr -c "print server"
  register: qmgr_check_command
  changed_when: False

- name: executing torque configuration
  shell: "{{ item }}"
  become: true
  become_user: "{{ root_user }}"
  with_items:
    - qmgr -c "create queue batch queue_type=execution"
    - qmgr -c "set server query_other_jobs = True"
    - qmgr -c "set queue batch resources_max.ncpus={{ torque_cpus }}"
    - qmgr -c "set server default_queue=batch"
    # Torque queue set
    - qmgr -c "set queue batch enabled=True"
    - qmgr -c "set queue batch started=True"
    # Torque queue started
    - qmgr -c "set queue batch resources_default.nodes=1"
    - qmgr -c "set queue batch resources_default.walltime=3600"
    - qmgr -c "set queue batch max_running=2"
    # Torque queue parameters set
    - qmgr -c "set server scheduling=True"
    # Torque scheduling started
    - qmgr -c "unset server acl_hosts"
    - qmgr -c "set server acl_hosts={{ torque_hostname }}"
    # Torque server ACL hosts set
  register: qmgr_command_result
  failed_when: "'Unauthorized' in qmgr_command_result.stderr"
  when: 
    "'batch' not in qmgr_check_command.stdout"

- name: Restart the torque server
  become: true
  become_user: "{{ root_user }}"
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - torque-server
    - torque-mom
    - torque-scheduler
  when: 
    "'batch' not in qmgr_check_command.stdout"

# I need to setup a couple of things for the next reboots, as "workarounds"
# for weird torque/PBS behaviours

# First: I put a script that both restarts the torque-scheduler when it's down
# (typically: crashed) and the server is up
- name: Copy the torque script for if-up (when the interface goes up)
  become: true
  become_user: "{{ root_user }}"
  template:
      src: torque
      dest: "/etc/network/if-up.d"
      mode: 0755

# Second: I fix a problem in the default script provided by Ubuntu that does 
# not put the right dependency of the torque-scheduler service on the network
# (it is started before the DHCP address is assigned - the torque-server is ok,
# instead)
- name: Fix the dependency of the torque-scheduler init script
  become: true
  become_user: "{{ root_user }}"
  lineinfile: 
    path: "/etc/init.d/torque-scheduler"
    regexp: '^# Required-Start:'
    line: "# Required-Start:    $all $remote_fs $local_fs $named $network $time"
    owner: root
    group: root
    mode: 0755

- include_role:
    name: release_notes
  vars:
    section: "Job Scheduler"
    option: "torque"
    value: "Use 'qsub' to submit jobs and 'qstat' to get the status."
  when: release_notes is defined and release_notes
